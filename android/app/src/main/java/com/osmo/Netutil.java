package com.osmo;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.io.StringWriter;import java.net.HttpURLConnection;import java.net.InetSocketAddress;import java.net.Proxy;import java.net.URL;import java.security.MessageDigest;import java.security.cert.X509Certificate;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.ProgressDialog;import android.content.Context;import android.os.AsyncTask;import android.app.Notification.Builder;import android.util.Log;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;public class Netutil    {        public static String inputStreamToString(InputStream in) throws IOException, NullPointerException            {                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));                StringBuilder stringBuilder = new StringBuilder();                String line = null;                while ((line = bufferedReader.readLine()) != null)                    {                        //Log.d("OsMo", "line=" + line);                        stringBuilder.append(line + "\n");                    }                bufferedReader.close();                return stringBuilder.toString();            }        public static String bytesToHex(byte[] b)            {                char hexDigit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};                StringBuffer buf = new StringBuffer();                for (int j = 0; j < b.length; j++)                    {                        buf.append(hexDigit[(b[j] >> 4) & 0x0f]);                        buf.append(hexDigit[b[j] & 0x0f]);                    }                return buf.toString();            }        public static String SHA1(String text)            {                MessageDigest md;                byte[] sha1hash = new byte[40];                try                    {                        md = MessageDigest.getInstance("SHA-1");                        sha1hash = md.digest(text.getBytes());                    }                catch (Exception e)                    {                        e.printStackTrace();                    }                return bytesToHex(sha1hash);            }        public synchronized static String unescape(String s)            {                while (true)                    {                        int n = s.indexOf("&#");                        if (n < 0)                            {                                break;                            }                        int m = s.indexOf(";", n + 2);                        if (m < 0)                            {                                break;                            }                        try                            {                                s = s.substring(0, n) + (char) (Integer.parseInt(s.substring(n + 2, m))) +                                        s.substring(m + 1);                            }                        catch (Exception e)                            {                                return s;                            }                    }                s = s.replace("&quot;", "\"");                s = s.replace("&lt;", "<");                s = s.replace("&gt;", ">");                s = s.replace("&amp;", "&");                return s;            }        public static class MyAsyncTask extends AsyncTask<APIcomParams, Void, APIComResult>            {                ResultsListener listener;                HttpURLConnection con;                InputStream in;                ProgressDialog dialog;                private Context mContext;                MyAsyncTask(ResultsListener listener, Context context)                    {                        this.listener = listener;                        mContext = context;                    }                MyAsyncTask(ResultsListener listener)                    {                        this.listener = listener;                    }                protected void onPreExecute()                    {                        if (!(mContext == null))                            {                                dialog = ProgressDialog.show(mContext, "", mContext.getString(R.string.commandpleasewait), true);                                dialog.show();                            }                    }                public void close()                    {                        try                            {                                in.close();                            }                        catch (Exception e)                            {                                Log.d(this.getClass().getName(), "MyAsyncTask close exeption");                                e.printStackTrace();                            }                        if (con != null)                            {                                con.disconnect();                            }                        Log.d(this.getClass().getName(), "MysyncClass.close");                    }                String getPage(String adr, String post, File uploadfile, Builder notificationBuilder, int notification)                        throws IOException, NullPointerException                    {                        int portOfProxy = android.net.Proxy.getDefaultPort();                        if (portOfProxy > 0)                            {                                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(                                        android.net.Proxy.getDefaultHost(), portOfProxy));                                con = (HttpURLConnection) new URL(adr).openConnection(proxy);                            }                        else                            {                                con = (HttpURLConnection) new URL(adr).openConnection();                            }                        if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB)                            {                                TrustManager[] trustAllCerts = new TrustManager[]{                                        new X509TrustManager()                                            {                                                public X509Certificate[] getAcceptedIssuers()                                                    {                                                        X509Certificate[] myTrustedAnchors = new X509Certificate[0];                                                        return myTrustedAnchors;                                                    }                                                @Override                                                public void checkClientTrusted(X509Certificate[] certs, String authType)                                                    {                                                    }                                                @Override                                                public void checkServerTrusted(X509Certificate[] certs, String authType)                                                    {                                                    }                                            }                                };                                try                                    {                                        HttpsURLConnection cons = (HttpsURLConnection) con;                                        SSLContext context = SSLContext.getInstance("TLS");                                        context.init(null, trustAllCerts, null);                                        cons.setSSLSocketFactory(context.getSocketFactory());                                    }                                    catch (Exception e)                                        {                                            e.printStackTrace();                                            StringWriter sw = new StringWriter();                                            e.printStackTrace(new PrintWriter(sw));                                            String exceptionAsString = sw.toString();                                        }                            }                        con.setReadTimeout(30 * 1000);                        con.setConnectTimeout(30 * 1000);                        if (post != null)                            {                                con.setRequestMethod("POST");                                con.setDoOutput(true);                                con.setDoInput(true);                                OutputStream os = con.getOutputStream();                                os.write(post.getBytes());                                //Log.d(this.getClass().getName(), "POSTим:" + post);                                os.flush();                                os.close();                            }                        if (uploadfile != null)                            {                                String lineEnd = "\r\n";                                String twoHyphens = "--";                                String boundary = "*****";                                con.setRequestMethod("POST");                                con.setDoOutput(true);                                con.setDoInput(true);                                con.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);                                OutputStream os = con.getOutputStream();                                DataOutputStream dos = new DataOutputStream(os);                                InputStream in = new FileInputStream(uploadfile);                                dos.writeBytes(twoHyphens + boundary + lineEnd);                                dos.writeBytes("Content-Disposition: form-data; name=\"track\";filename=\"" + uploadfile.getName() + "\"" + lineEnd + " Content-Type: application//gpx+xml" + lineEnd);                                dos.writeBytes(lineEnd);                                byte[] buffer = new byte[512];                                int bytesRead = -1;                                int count = 0;                                while ((bytesRead = in.read(buffer)) != -1)                                    {                                        dos.write(buffer, 0, bytesRead);                                        count = count + buffer.length;                                        if (notificationBuilder != null)                                            {                                                notificationBuilder.setProgress(100, (int) (count * 100 / uploadfile.length()), false);                                            }                                        Log.d(this.getClass().getName(), "poststreambuffer:" + new String(buffer, "UTF-8"));                                    }                                dos.writeBytes(lineEnd);                                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);                                Log.d(this.getClass().getName(), "Что upload:" + uploadfile.getName());                                dos.flush();                                os.flush();                                os.close();                                dos.close();                            }                        con.connect();                        try                            {                                in = con.getInputStream();                                if (con.getResponseCode() == HttpURLConnection.HTTP_OK && !(in == null))                                    {                                        String str = inputStreamToString(in);                                        return str;                                    }                                else                                    {                                        return "HTTP_CODE:" + Integer.toString(con.getResponseCode());                                    }                            }                        catch (Exception e)                            {                                e.printStackTrace();                                return e.toString();                            }                    }                @Override                protected void onProgressUpdate(Void... values)                    {                        super.onProgressUpdate(values);                    }                @Override                protected APIComResult doInBackground(APIcomParams... params)                    {                        //Log.d(this.getClass().getName(), "команда:" + params[0].command);                        Log.d(this.getClass().getName(), "url:" + params[0].action);                        JSONObject resJSON = null;                        String Commandtext = null;                        APIComResult resAPI = new APIComResult();                        try                            {                                Commandtext = getPage(params[0].action, params[0].post, params[0].uploadfile, params[0].notificationBuilder, params[0].notification);                            }                        catch (IOException e1)                            {                                Log.d(this.getClass().getName(), "IO exp" + e1.toString());                                Commandtext = e1.toString();                            }                        try                            {                                //Log.d(this.getClass().getName(), Commandtext);                                resJSON = new JSONObject(Commandtext);                                resAPI.Jo = resJSON;                                //Log.d(this.getClass().getName(), resJSON.toString());                                //Log.d(this.getClass().getName(), params[0].command);                            }                        catch (JSONException e)                            {                                e.printStackTrace();                            }                        catch (NullPointerException e)                            {                                e.printStackTrace();                                Log.d(this.getClass().getName(), "Что-то нулл");                            }                        try                            {                                resAPI.ja = new JSONArray(Commandtext);                            }                        catch (JSONException e)                            {                                Log.d(this.getClass().getName(), "JSON not array");                            }                        catch (NullPointerException e)                            {                                Log.d(this.getClass().getName(), "Что-то нулл2");                            }                        resAPI.Command = params[0].command;                        resAPI.rawresponse = Commandtext;                        resAPI.url = params[0].action;                        resAPI.post = params[0].post;                        resAPI.notificationid = params[0].notification;                        return resAPI;                    }                @Override                protected void onPostExecute(APIComResult result)                    {                        if (!(mContext == null) && !(dialog == null))                            {                                if (dialog.isShowing())                                    {                                        dialog.dismiss();                                    }                            }                        //Log.d(this.getClass().getName(), "void onPostExecute:" + result.Command + " " + result.rawresponse);                        //Log.d(this.getClass().getName(), Boolean.toString(isCancelled()));                        listener.onResultsSucceeded(result);                    }                @Override                protected void onCancelled()                    {                        super.onCancelled();                        Log.d(this.getClass().getName(), "void onCanceled");                    }            }    }